import google.generativeai as genai
import streamlit as st
import config
import base64
import time
from bs4 import BeautifulSoup
import re
from pptx import Presentation  # Add this import
from pptx.util import Inches, Pt
import os

# Accessing Api key
api_key = config.api_key

# Configuring api key for gen ai
genai.configure(api_key=api_key)

# Custom CSS for background image
# Read the image file
image_path = "background.png"
image_data = open(image_path, "rb").read()

# Convert the image data to base64
image_base64 = base64.b64encode(image_data).decode()

# Set the background image using a container with custom style
st.markdown(
    f"""
    <style>
        .stApp {{
            background-image: url('data:image/png;base64,{image_base64}');
            background-size: cover;
            background-repeat: no-repeat;
            opacity: 0.8;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# Page title
st.markdown("<h1 style='color: lavender; text-shadow: 4px 4px 4px rgba(0, 0, 0, 0.8);'> AI Magic - PPT Mastery</h1>",
            unsafe_allow_html=True)
st.subheader('Make your PPT in one GO with AI')

# Initialize the model
model = genai.GenerativeModel('gemini-pro')

subject = st.text_input("Enter the subject for the PPT")

ppt_titles_generated = False
generated_ppt_titles = []


def clean_title(title):
    for i in range(20):
        title = title.strip().lstrip(f"{i}.\"").rstrip("\"")
    return title


@st.cache_resource(show_spinner=False)
def generate_ppt_titles(subject):
    if not subject:
        st.error("Please enter a subject for the PPT first.")
        return []  # Return an empty list if no subject is provided
    with st.spinner("Generating PPT titles..."):
        prompt = f"Generate 5 creative and informative titles for a presentation on the subject of {subject}."
        response = model.generate_content(prompt, stream=True)
        response.resolve()
        response_text = response.text.strip()
        if response_text:
            titles = [clean_title(title) for title in response_text.split("\n")[:5]]
        else:
            titles = []
        return titles


if st.button("Generate PPT Titles"):
    generated_ppt_titles = generate_ppt_titles(subject)
    # st.write("Generated PPT Titles:")
    # st.write(generated_ppt_titles)
    ppt_titles_generated = True
    st.session_state.ppt_titles = generated_ppt_titles

if "ppt_titles" in st.session_state:
    with st.spinner(""):
        st.write("PPT Titles Generated by AI for your Subject:")
        st.write(st.session_state.ppt_titles)


@st.cache_resource(show_spinner=False)
def generate_slide_topics(subject, ppt_titles, ppt_title):
    with st.spinner("Generating slide topics..."):
        prompt = (
                "Generate 5 concise and informative titles for slides within a presentation titled '{ppt_title}' on {subject}, "
                "focused on the following topics:\n"
                + ''.join(f'- {title}\n' for title in ppt_titles)
        )
        response = model.generate_content(prompt, stream=True)
        response.resolve()
        response_text = response.text.strip()
        if response_text:
            slide_topics = response_text.split("\n")[:5]
        else:
            slide_topics = []
        return slide_topics


def remove_repetitive_lines(text):
    lines = text.split('\n')
    cleaned_lines = []

    for line in lines:
        # Check if a similar line is not already in the cleaned lines
        if not any(line.lower().strip() in cleaned.lower().strip() for cleaned in cleaned_lines):
            cleaned_lines.append(line)

    cleaned_text = '\n'.join(cleaned_lines)
    return cleaned_text


def generate_slide_content(slide_titles, no_of_slides, title_ppt):
    generated_content = []
    num_titles = len(slide_titles)

    if num_titles == 0:
        st.warning("Warning: No slide titles provided.")
        return generated_content

    for i in range(no_of_slides):
        slide_title = slide_titles[i % num_titles]
        prompt = f"Generate content for slide {i + 1} of the presentation titled '{title_ppt}', with the heading '{slide_title}'."
        response = model.generate_content(prompt, stream=True)
        response.resolve()
        slide_content = response.text

        # Remove HTML tags from slide_content
        slide_content = BeautifulSoup(slide_content, 'html.parser').get_text()

        # Clean up the title format
        slide_title_cleaned = re.sub(r'^\*\*.*?\*\*|\d+\.', '', slide_title).strip()

        # Extract heading from slide_title (if available)
        heading_match = re.match(r'^\d+\.\s*(.+)', slide_title)
        heading = heading_match.group(1) if heading_match else ""

        # Add title_ppt as the main title
        generated_content.append(f"Title: {title_ppt}\n")

        # Add slide title to the generated content
        generated_content.append(f"Slide {i + 1} - {slide_title_cleaned}\n")

        if heading:
            # Add heading to the generated content
            generated_content.append(f"  - {heading}\n")

        # Add slide content to the generated content
        content_lines = [line.strip() for line in slide_content.split('\n') if line.strip()]
        generated_content.extend(content_lines)

        # Add an extra line between slides
        generated_content.append("\n")

    return generated_content


if "ppt_titles" in st.session_state and st.session_state.ppt_titles:
    ppt_title = st.text_input("Enter the final title for the PPT")

    # Generate Slide Topics Section
    st.write("Generated Slide Titles:")
    generate_slide_topics_button = st.button("Generate Slide Topics")
    slide_topics_generated = st.session_state.get("slide_topics_generated", False)

    if generate_slide_topics_button and ppt_title:
        slide_topics = generate_slide_topics(subject, st.session_state.ppt_titles, ppt_title)
        st.write(slide_topics)
        st.session_state.slide_topics = slide_topics
        st.session_state.slide_topics_generated = True

    # Select Slide Titles Section
    with st.form("slide_content_form"):
        st.write("Select slide titles and specify options:")

        # Check if slide topics are generated before showing the dropdown
        slide_topics = st.session_state.get("slide_topics", [])
        selected_slide_titles = st.multiselect("Select slide titles to use (or add your own)", slide_topics)

        extra_slide_titles = st.text_input("Add any extra slide titles (optional)")
        number_of_slides = st.number_input("How many slides do you want to generate?", min_value=1, value=5)

        form_submitted = st.form_submit_button("Generate PPT")

    # Generate PPT Section
    if form_submitted and slide_topics_generated:
        generated_content = generate_slide_content(selected_slide_titles, number_of_slides, ppt_title)

        # Display the generated content
        st.write("Slide Content Generated:")

        with st.spinner('Content Generating'):
            # Create PowerPoint presentation
            prs = Presentation()

            # Add title slide
            title_slide_layout = prs.slide_layouts[0]
            title_slide = prs.slides.add_slide(title_slide_layout)
            title_placeholder = title_slide.shapes.title
            title_placeholder.text = ppt_title

            # Add content slides
            for i in range(1, len(generated_content), 4):
                content_slide_layout = prs.slide_layouts[5]  # Use a blank slide layout
                content_slide = prs.slides.add_slide(content_slide_layout)

                # Add slide title
                title_box = content_slide.shapes.add_textbox(left=Inches(1), top=Inches(0.5), width=Inches(8),
                                                             height=Inches(1))
                title_frame = title_box.text_frame
                title_frame.word_wrap = True
                title_frame.margin_top = Pt(0)
                title_frame.margin_bottom = Pt(0)
                title_frame.margin_left = Pt(0)
                title_frame.margin_right = Pt(0)
                title_frame.text = generated_content[i]

                # Add heading
                heading_box = content_slide.shapes.add_textbox(left=Inches(1), top=Inches(1.5), width=Inches(8),
                                                               height=Inches(1))
                heading_frame = heading_box.text_frame
                heading_frame.word_wrap = True
                heading_frame.margin_top = Pt(0)
                heading_frame.margin_bottom = Pt(0)
                heading_frame.margin_left = Pt(0)
                heading_frame.margin_right = Pt(0)
                if i + 1 < len(generated_content):
                    heading_frame.text = generated_content[i + 1]

                # Add content
                content_box = content_slide.shapes.add_textbox(left=Inches(1), top=Inches(2), width=Inches(8),
                                                               height=Inches(5))
                content_frame = content_box.text_frame
                content_frame.word_wrap = True
                content_frame.margin_top = Pt(0)
                content_frame.margin_bottom = Pt(0)
                content_frame.margin_left = Pt(0)
                content_frame.margin_right = Pt(0)
                if i + 2 < len(generated_content):
                    content_frame.text = generated_content[i + 2]

            # Save the presentation
            cleaned_title = re.sub(r'[^a-zA-Z0-9]', '_', ppt_title)
            file_name = f"{cleaned_title}_presentation.pptx"
            file_path = os.path.join(os.getcwd(), file_name)
            prs.save(file_path)

            with open(file_path, "rb") as f:
                file_data = f.read()

            download_button = st.download_button(
                label=f"Download {ppt_title} Presentation",
                data=file_data,
                mime='application/vnd.openxmlformats-officedocument.presentationml.presentation'
            )

            # Display the download button
            st.markdown(download_button, unsafe_allow_html=True)


# Footer with disclaimer
st.markdown(
    """
    ---
    #### Disclaimer:
    The content generated by the automatic PowerPoint (PPT) maker on this platform is powered by the Gen AI (Generative AI) engine.  
    The slides and content are generated by AI. Review and edit as needed.  
    Use the tool creatively; results may vary.  
    Respect copyrights and trademarks.  
    Model Developed : Aswin Damarapalli  
    """
)